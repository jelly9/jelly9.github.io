{"meta":{"title":"Jelly","subtitle":null,"description":null,"author":"Jelly","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"test2","slug":"test2","date":"2017-08-22T15:09:00.000Z","updated":"2017-08-22T15:09:51.202Z","comments":true,"path":"2017/08/22/test2/","link":"","permalink":"http://yoursite.com/2017/08/22/test2/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"HTML标记","slug":"HTML标记","date":"2017-08-22T12:35:14.930Z","updated":"2017-03-11T07:31:35.797Z","comments":true,"path":"2017/08/22/HTML标记/","link":"","permalink":"http://yoursite.com/2017/08/22/HTML标记/","excerpt":"","text":"##HTML常用标记总结标记D：单标记其它未注明的为双标记，即有始标记&lt;mark&gt;和尾标记&lt;/mark&gt;组成 标记 含义 &lt;html&gt; html文档 &lt;head&gt; 文档头部 &lt;body&gt; 文档主体 &lt;title&gt; 文档标题，写于文档头部，在浏览器标题栏中显示 &lt;style&gt; 定义文档样式信息 &amp;nbsp D 空格 &lt;br&gt; D 换行 &lt;p&gt; 段落 &lt;hr&gt; D 水平线 &lt;!--.注释--&gt; 注释 &lt;img&gt; 插入图片 &lt;form&gt; 表单标记 &lt;table&gt; 表格标记 &lt;td&gt; 表格中列 &lt;tr&gt; 表格中的行 &lt;a&gt; 链接（herf）","categories":[],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"}]},{"title":"20行的string类（一行可以写完的代码为什么要写两行 +_+!）","slug":"string类","date":"2017-08-22T12:35:14.916Z","updated":"2017-03-14T10:49:15.640Z","comments":true,"path":"2017/08/22/string类/","link":"","permalink":"http://yoursite.com/2017/08/22/string类/","excerpt":"","text":"###不强调效率，以时间换空间，可读性差1234567891011121314151617181920class String&#123;public: String():_str(new char[1])&#123;*_str = &apos;\\0&apos;;&#125; String(const char* s):_str(new char[strlen(s)+1])&#123;strcpy(_str, s);&#125; String(const String&amp; s):_str(new char[strlen(s._str)+1])&#123;strcpy(_str, s._str);&#125; ~String()&#123;delete[] _str;&#125; String&amp; operator=(String s)&#123;std::swap(_str,s._str);return *this;&#125; size_t Size()const&#123;return strlen(_str);&#125; size_t Lengh()const&#123;return strlen(_str);&#125; bool operator&gt;(const String&amp; s)&#123;return((strcmp(_str,s._str)==1)?1:0);&#125; bool operator&lt;(const String&amp; s)&#123;return((strcmp(_str,s._str)==-1)?1:0);&#125; bool operator&gt;=(const String&amp; s)&#123;return((strcmp(_str,s._str)!=(-1))?1:0);&#125; bool operator&lt;=(const String&amp; s)&#123;return((strcmp(_str,s._str)!=(1))?1:0);&#125; bool operator==(const String&amp; s)&#123;return((strcmp(_str,s._str)==0)?1:0);&#125; bool operator!=(const String&amp; s)&#123;return!(*this==s);&#125; char operator[](size_t i)&#123;return *((*this)._str+i);&#125;private: char* _str;&#125;; ###未调用系统函数版，可读性差1234bool operator&gt;(const String&amp; s)&#123;if((_str!=NULL)||(s._str!=NULL))&#123;char* s1=_str,*s2=s._str;while((*s1!=&apos;\\0&apos;)&amp;&amp;(*s2!=&apos;\\0&apos;))&#123;if(*s1&lt;*s2||*s1==*s2)return 0;s1++;s2++;&#125;return (*s2==&apos;\\0&apos;);&#125;return 0;&#125;bool operator&lt;(const String&amp; s)&#123;return !((*this&gt;s)||(*this==s));&#125;bool operator==(const String&amp; s)&#123;if((_str!=NULL)&amp;&amp;(s._str!=NULL))&#123;char*s1=_str,*s2=s._str;while((*s1!=&apos;\\0&apos;)&amp;&amp;(*s2!=&apos;\\0&apos;))&#123;if(*s1!=*s2)return 0;s1++;s2++;&#125;return 1;&#125;return 0;&#125;bool operator!=(const String&amp; s)&#123;return (!(*this==s));&#125;","categories":[],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"}]},{"title":"Linux下目录和文件的权限","slug":"LInux文件与目录的权限","date":"2017-08-22T12:35:14.908Z","updated":"2017-03-22T14:22:39.365Z","comments":true,"path":"2017/08/22/LInux文件与目录的权限/","link":"","permalink":"http://yoursite.com/2017/08/22/LInux文件与目录的权限/","excerpt":"","text":"在Linux系统内文件有三种身份（owner、group、others），而且每种身份有三种权限（r（read）、w（write）、x（execute）），我们可以使用chmod、chown、chgrp去修改这 些权限，也可以用ls -l查看他们的权限与属性，那么这些权限对于一般文件和目录文件有什么不同呢。 ##文件的权限一般文件可以记录数据。计算机中文件有一般文本文件（txt、word等）、图片、可执行文件（exe）、等等，那么权限对于这些文件来说有什么意义？ 如下： 读r(read): 可以读取此文件的实际内容，比如文本文件的文字内容等。 写w(write): 可以编辑、修改文件的内容（不包括删除该文件）。 执行x(execute): 代表该文件有被系统执行的权限。 如图创建一个test.c文件，默认的权限为：拥有者和用户组都有读、写权限，其它只有读的权限。 我们用编辑器给其写入内容，并且用cat读取它的内容发现都没问题（此处及以下皆以拥有者的身份操作）。 去掉拥有者的r权限，当再次cat它时，终端提醒我们权限不够。 去掉拥有者的w权限，当用编辑器给它写内时，编辑器提醒权限不足（当然你可以强制写入）。 对于文件的x权限，我们先生成一个a.out文件，然后执行它，没有问题。 但是去掉它的x权限后，当我们想执行它时，发现权限不够。 通过以上，我们大概可以总结出关于一般文件权限的几个特点： 读文件（用cat显示），必须要有该文件的“读权限”。 对文件写入内容（编辑、修改内容），需要文件的“写”权限（在某些情况下没有“写“权限时，可以强制写入）。 一个文件能否执行和你是否拥有该文件的“执行”权限有关，这一点和windows有所区别，在windows下，一个文件的执行能力通过“扩展名”来判断，如： .exe, .html等。 文件中记录了数据，对于文件的读写权限，主要是针对文件的内容而言，如cat显示文件的内容，编辑修改文件的内容。 ##目录的权限目录主要要记录文件名列表，目录和文件有着紧密的联系，那么目录的r、w、x三种权限有什么意义呢？ 先创建一个默认权限为rwx rwx r-x的目录document，对它进行cd、ls、mkdir、rm等操作都没问题，去掉它的r权限之后，我们企图显示该目录的文件列表，发现做不到，原因是权限不够。 再次去掉该目录的r权限，进入该目录，当创建一个文件（或目录）时，终端提示权限不够，不仅如此，它还不允许我们对文件进行删除、移动、重命名操作。 当去掉该目录的x权限后，我们无法进入该目录。 对于目录，我们如果把它比作一个大房子，里面的东西比作桌子椅子（大房子里也可以套小房间，不是吗？）等等话，那么r权限则关系到我们能否进入该房子，而w权限关系到我们能否挪动该房子里的东西，比如移走桌子，添加椅子到里面等等，而r权限则和我们能否看到房子里的东西有关，没有r权限就相当于我们在房子里闭着眼睛，只是看不到里面的东西，但你仍然可以挪动。 通过以上我们了解到： 拥有目录的r权限，我们可以通过ls查看该目录下的文件（目录）名列表信息。 w权限对于目录来说很强大，拥有目录的w权限意味着你可以: 创建新的文件与目录。 删除已经存在的文件和目录（不论该文件你的权限如何）。 重命名已存在的文件和目录。 移动文件和目录的位置。 目录的x权限代表着你能否进入该目录成为工作目录的用途，所谓工作目录就是你当前所在的目录。举个例子：当你登录Linux系统时，你所在的主文件夹就是你当下的工作目录。 #成于坚持，败于止步！","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"Test1","slug":"Test_1","date":"2017-08-21T14:52:01.487Z","updated":"2017-08-21T14:52:01.616Z","comments":true,"path":"2017/08/21/Test_1/","link":"","permalink":"http://yoursite.com/2017/08/21/Test_1/","excerpt":"","text":"Hello blog 1 2 3 4 a b c d 123456789#include &lt;stdio.h&gt;int main()&#123; printf(&quot;Hello blog!&quot;); return 0;&#125; 图片","categories":[],"tags":[{"name":"test","slug":"test","permalink":"http://yoursite.com/tags/test/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-08-21T04:52:22.076Z","updated":"2017-08-21T04:52:22.076Z","comments":true,"path":"2017/08/21/hello-world/","link":"","permalink":"http://yoursite.com/2017/08/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}